#!/usr/bin/sudo bash

#  
#  
#
#  Created by Euphrasie Servant on 17/06/2022.
#

. ~/miniconda3/etc/profile.d/conda.sh

# source shflags
basesh=`dirname $0`
pipeshflag=`realpath ${basesh}/shflags/shflags`
. $pipeshflag


# define command-line string flag
DEFINE_string 'base' '.' 'working directory' 'w'
DEFINE_string 'sample' 'JohnDoe' 'sample name' 's'
DEFINE_string 'ref' '' 'reference genome' 'R'
DEFINE_string 'fast5' '' 'directory containing raw fast5' 'f'
DEFINE_string 'pod5' '' 'directory for  fast5 to pod5 conversion output or already containing pod5' 'p'
DEFINE_string 'fastqs' '' 'basecalling directory from guppy or dorado, in case of real time basecalling during sequencing. This pipeline will only use pass reads. The sequencing summary should be in this directory. If one fastq file is provided, instead of a guppy basecalling directory, a copy of the sequencing summary should be placed in the base directory (-w)' 'q'
DEFINE_string 'summary' '' 'path to sequencing_summary.txt generated during real time sequencing. Provide a sequencing_summary.txt if you start the pipeline with a bam' 'S'
DEFINE_string 'bam' '' 'path to aligned BAM. File has to be indexed.' 'k'
DEFINE_string 'snp_caller' 'clair3' 'snp caller: either pmdv, clair3 or all' 'c'
DEFINE_boolean 'basecalling' false 'basecalling' 'B'
DEFINE_boolean 'modified' false 'modified bases calling' 'M'
DEFINE_boolean 'alignment' true 'alignment' 'A'
DEFINE_string 'flowcell' 'r10' 'flowcell and basecalling model: either r9 or r10' 'r'
DEFINE_string 'bps' '400' 'bases called per second' 'b'
DEFINE_string 'acc' 'sup' 'basecalling accuracy' 'a'
DEFINE_boolean 'duplex' false 'duplex basecalling' 'd'
DEFINE_string 'threads' '' 'max number of threads to use' 't'
DEFINE_boolean 'version' false 'tools versions' 'v'

# parse the command-line
FLAGS "$@" || exit $?
eval set -- "${FLAGS_threads}"

echo  ${FLAGS_version}


# version
if [ ${FLAGS_version} -eq ${FLAGS_TRUE} ]
then 
    echo ""
    echo "minimap2:"
    minimap2 --v 
    echo ""
    echo ""
    echo "dorado:"
    dorado --version
    echo ""
    echo ""
    echo "minimap2:"
    minimap2 --v 
    echo ""
    echo ""
    echo "pycoCQ:"
    pycoQC --version
    echo ""
    echo ""
    echo "Sniffles"
    sniffles --version
    echo ""
    echo ""
    echo "PEPPER-Margin-DeepVariant"
    docker run --ipc=host kishwars/pepper_deepvariant:r0.8-gpu run_pepper_margin_deepvariant --version
    echo ""
    echo ""
    echo "Clair3"
    run_clair3.sh --version
    echo ""
    echo ""

    exit 1
fi




if [ -z "$FLAGS_ref" ]
then 
    echo "" 
    echo "ERROR: Please, provide a reference genome"
    exit 1
fi



if [[ "$FLAGS_basecalling" -eq ${FLAGS_TRUE} ]] && [[ "$FLAGS_alignment" -eq ${FLAGS_FALSE} ]]
then 
    echo "" 
    echo "Basecalling -B is set on so alignment will be set on too."
    FLAGS_alignment=${FLAGS_TRUE} 
fi


if [[ "$FLAGS_basecalling" -eq ${FLAGS_FALSE} ]] && [[ $FLAGS_fastqs -eq ${FLAGS_FALSE} ]] && [[ $FLAGS_alignment -eq ${FLAGS_TRUE} ]]
then 
    echo "" 
    echo "Basecalling -B is offset, but you did not provide fastqs -q"
    exit 1
fi


if [[ $FLAGS_alignment -eq ${FLAGS_FALSE} ]] && [[ -z "$FLAGS_bam" ]]
then 
    echo "" 
    echo "ERROR: Please, provide an aligned bam file (with its index) and a sequencing_summary.txt for quality check"
    exit 1
fi

if [[ -n $FLAGS_bam ]] && [[ -z "$FLAGS_summary" ]]
then 
    echo "" 
    echo "ERROR: Please, provide a sequencing_summary.txt for quality check"
fi

if [[ -n $FLAGS_fastqs ]] && [[ -z "$FLAGS_alignment" ]]
then 
    echo "" 
    echo "Fastqs provided"
fi

if [[ -n $FLAGS_duplex ]] 
then 
    echo "" 
    echo "Duplex basecalling"
    FLAGS_basecalling=${FLAGS_TRUE} 

fi

# model flowcell

if [[ "$FLAGS_flowcell" = "r9" ]]
then 
    MODEL_CLAIR="r941_prom_sup_g5014"
    MODEL_PMDV="--ont_r9_guppy5_sup"
    MODEL_DORADO="dna_r9.4.1_e8_${FLAGS_acc}*"
    #MODEL_DORADO_MOD=`ls ${CONDA_PREFIX}/bin/dorado_models/ | grep -E ^dna_r9.4.1_e8_${FLAGS_acc}@.*v0$`
    echo ""
    echo -e "\ndorado model: $MODEL_DORADO \nPMDV model: $MODEL_PMDV \nClair3 model: $MODEL_CLAIR"
elif [[ "$FLAGS_flowcell" = "r10" ]]
then 
    MODEL_CLAIR=`ls ${CONDA_PREFIX}/bin/clair3_models/ | grep -E ^r1041_e82_${FLAGS_bps}bps_${FLAGS_acc}_v410`
    MODEL_PMDV="--ont_r10_q20"
    MODEL_DORADO=`ls ${CONDA_PREFIX}/bin/dorado_models/ | grep -E ^dna_r10.4.1_e8.2_${FLAGS_bps}bps_${FLAGS_acc}@v4.1.0$`
    MODEL_DORADO_MOD=`ls ${CONDA_PREFIX}/bin/clair3_models/ | grep -E ^r1041_e82_400bps_${FLAGS_acc}_v420`
    echo ""
    echo -e "\ndorado model: $MODEL_DORADO \nPMDV model: $MODEL_PMDV \nClair3 model: $MODEL_CLAIR"
else
    echo ""
    echo "Flowcell type '${FLAGS_flowcell}' unknown. Supported flowcells -f: 'r9' or 'r10'"
    exit 1 
fi


# small variants caller

if [[ "$FLAGS_snp_caller" = "pmdv" ]]
then 
    echo ""
    echo -e "small variants caller: PEPPER-Margin-DeepVariant. \nPlease cite Shafin, K., Pesout, T., Chang, PC. et al. Haplotype-aware variant calling with PEPPER-Margin-DeepVariant enables high accuracy in nanopore long-reads. Nat Methods 18, 1322–1332 (2021). https://doi.org/10.1038/s41592-021-01299-w"
elif [[ "$FLAGS_snp_caller" = "clair3" ]]
then 
    echo ""
    echo -e "small variants caller: Clair3. \nPlease cite Zhenxian Zheng, Shumin Li, Junhao Su, Amy Wing-Sze Leung, Tak-Wah Lam, Ruibang Luo, Symphonizing pileup and full-alignment for deep learning-based long-read variant calling. https://doi.org/10.1101/2021.12.29.474431"
elif [[ "$FLAGS_snp_caller" = "all" ]]
then 
    echo ""
    echo -e "small variants caller: Clair3 and PEPPER-Margin-DeepVariant. \nPlease cite Shafin, K., Pesout, T., Chang, PC. et al. Haplotype-aware variant calling with PEPPER-Margin-DeepVariant enables high accuracy in nanopore long-reads. Nat Methods 18, 1322–1332 (2021). https://doi.org/10.1038/s41592-021-01299-w and Zhenxian Zheng, Shumin Li, Junhao Su, Amy Wing-Sze Leung, Tak-Wah Lam, Ruibang Luo, Symphonizing pileup and full-alignment for deep learning-based long-read variant calling. https://doi.org/10.1101/2021.12.29.474431"
else
    echo ""
    echo "This caller '${FLAGS_snp_caller}' is not supported. Supported callers -c: pmdv or clair3 or all (both)"
    exit 1
fi

